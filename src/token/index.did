type Account = record { owner : principal; subaccount : opt vec nat8 };
type ActiveProposal = variant { Ok : ProposalViewResponse; Err : text };
type AirdropHolder = record { balance : nat; claimed : bool };
type ArchivedTransaction = record {
  callback : func (GetTransactionsRequest) -> (TransactionRange) query;
  start : nat;
  length : nat;
};
type Burn = record {
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
};
type Canisters = record { appName : text; canisterId : text };
type GetTransactionsRequest = record { start : nat; length : nat };
type GetTransactionsResponse = record {
  first_index : nat;
  log_length : nat;
  transactions : vec TransactionWithId;
  archived_transactions : vec ArchivedTransaction;
};
type IcRcTransferError = variant {
  GenericError : _InlineIcRcTransferErrorGenericError;
  TemporarilyUnavailable;
  BadBurn : _InlineIcRcTransferErrorBadBurn;
  Duplicate : _InlineIcRcTransferErrorDuplicate;
  BadFee : _InlineIcRcTransferErrorBadFee;
  CreatedInFuture : _InlineIcRcTransferErrorCreatedInFuture;
  TooOld;
  InsufficientFunds : _InlineProposalErrorInsufficientFunds;
};
type IcrcTransaction = record {
  burn : opt Burn;
  kind : text;
  mint : opt Mint;
  timestamp : nat64;
  transfer : opt IcrcTransferArgs;
};
type IcrcTransferArgs = record {
  to : Account;
  fee : opt nat;
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
};
type IcrcTransferResult = variant { Ok : nat; Err : IcRcTransferError };
type Mint = record {
  to : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
};
type ProposalError = variant {
  AccessDenied : text;
  ProposalNotFound;
  AlreadyExecuted;
  other : text;
  DuplicateVote;
  VotingOngoing;
  ExistingProposal;
  InsufficientCycles : _InlineProposalErrorInsufficientFunds;
  VotingPeriodEnded;
  NoVotingPower;
  InsufficientFunds : _InlineProposalErrorInsufficientFunds;
};
type ProposalResponse = variant { Ok : nat64; Err : ProposalError };
type ProposalType = variant {
  installAppAction;
  treasuryAction;
  addDeployerAction;
  removeDeployerAction;
  deleteAppAction;
  changeProposalPrice;
};
type ProposalViewResponse = record {
  id : nat64;
  title : text;
  endTime : nat64;
  description : text;
  voters : vec Voter;
  ended : bool;
  error : opt ProposalError;
  proposalType : ProposalType;
  proposer : Account;
  executed : bool;
  amount : opt nat64;
  receiver : opt Account;
};
type StakingAccount = record {
  reward : opt nat;
  "principal" : text;
  accountId : text;
  claimed : bool;
  endStakeDate : opt nat;
  startStakeDate : nat;
  amount : nat;
};
type StakingClaimResponse = variant { Ok : nat; Err : text };
type StakingResponse = variant { Ok : StakingAccount; Err : text };
type SupportedStandard = record { url : text; name : text };
type TransactionRange = record { transactions : vec TransactionWithId };
type TransactionWithId = record { id : nat; transaction : IcrcTransaction };
type Value = variant { Int : int; Nat : nat; Blob : vec nat8; Text : text };
type VoteStatus = record {
  myVoteYes : nat64;
  voteNo : nat64;
  voteYes : nat64;
  myVoteNo : nat64;
};
type VoteStatusResponse = variant { Ok : VoteStatus; Err : text };
type Voter = record { direction : bool; voter : text; power : nat64 };
type _InlineIcRcTransferErrorBadBurn = record { min_burn_amount : nat };
type _InlineIcRcTransferErrorBadFee = record { expected_fee : nat };
type _InlineIcRcTransferErrorCreatedInFuture = record { ledger_time : nat64 };
type _InlineIcRcTransferErrorDuplicate = record { duplicate_of : nat };
type _InlineIcRcTransferErrorGenericError = record {
  message : text;
  error_code : nat;
};
type _InlineProposalErrorInsufficientFunds = record { balance : nat };
service : () -> {
  activeProposal : () -> (ActiveProposal) query;
  addCustodian : (opt text) -> (vec text);
  addDeployer : (opt text) -> (vec text);
  airdrop_claim : () -> (text);
  airdrop_entitled : (text) -> (opt AirdropHolder) query;
  airdrop_snapshot : () -> (text);
  airdrop_snapshot_holders_length : () -> (float64) query;
  airdrop_snapshot_status : () -> (text) query;
  burnAllXtc : () -> (nat);
  canisters : () -> (vec Canisters) query;
  claimStaking : (vec nat8) -> (StakingClaimResponse);
  createAndAddCanister : () -> (text);
  createDeleteWasmProposal : (Account, text, text, text) -> (ProposalResponse);
  createDeployerProposal : (Account, text, text, text, bool) -> (
      ProposalResponse,
    );
  createTreasuryProposal : (Account, text, text, Account, nat64) -> (
      ProposalResponse,
    );
  createWasmProposal : (
      Account,
      text,
      text,
      vec nat8,
      opt vec nat8,
      opt text,
      opt text,
    ) -> (ProposalResponse);
  cycleBalances : () -> (vec record { text; nat64 });
  drainICP : () -> (text);
  getCustodians : () -> (vec text) query;
  getDeployers : () -> (vec text) query;
  getDrainCanister : () -> (float64) query;
  getQueryArchiveFn : () -> (
      func (GetTransactionsRequest) -> (TransactionRange) query,
    ) query;
  getStakingAccount : (text) -> (vec StakingAccount) query;
  getTotalStaked : (text) -> (nat) query;
  get_transaction : (nat) -> (opt TransactionWithId);
  get_transactions : (GetTransactionsRequest) -> (
      GetTransactionsResponse,
    ) query;
  icpDistributeToken : (nat) -> (text);
  icpDistributionBalance : () -> (nat) query;
  icpDistributionExchangeRate : () -> (nat) query;
  icrc1_balance_of : (Account) -> (nat) query;
  icrc1_decimals : () -> (nat8) query;
  icrc1_fee : () -> (nat) query;
  icrc1_metadata : () -> (vec record { text; Value }) query;
  icrc1_minting_account : () -> (opt Account) query;
  icrc1_name : () -> (text) query;
  icrc1_supported_standards : () -> (vec SupportedStandard) query;
  icrc1_symbol : () -> (text) query;
  icrc1_total_supply : () -> (nat) query;
  icrc1_transfer : (IcrcTransferArgs) -> (IcrcTransferResult);
  installDrainCanister : (vec nat8) -> ();
  mint_tokens : () -> (IcrcTransferResult);
  pastProposals : () -> (vec ProposalViewResponse) query;
  removeCustodian : (opt text) -> (vec text);
  removeDeployer : (opt text) -> (vec text);
  startEndStaking : (vec nat8) -> (StakingResponse);
  startStaking : (vec nat8, nat, nat) -> (StakingResponse);
  startTimer : () -> (nat64);
  stopTimer : () -> (nat32);
  total_transactions : () -> (nat) query;
  tryDrainCanister : (principal) -> (text);
  vote : (Account, nat, bool) -> (ProposalResponse);
  voteStatus : () -> (VoteStatusResponse) query;
  xtcDistributeToken : (nat) -> (text);
  xtcDistributionBalance : () -> (nat) query;
  xtcDistributionExchangeRate : () -> (nat) query;
}