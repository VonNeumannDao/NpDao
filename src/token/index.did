type Account = record { owner : principal; subaccount : opt vec nat8 };
type ActiveProposal = variant { Ok : ProposalViewResponse; Err : text };
type Canisters = record { appName : text; canisterId : text };
type ManualReply = variant { Ok : nat32; Err : text };
type ProposalError = variant {
  AccessDenied;
  ProposalNotFound;
  AlreadyExecuted;
  other : text;
  VotingOngoing;
  ExistingProposal;
  InsufficientCycles : _InlineProposalErrorInsufficientFunds;
  VotingPeriodEnded;
  InsufficientFunds : _InlineProposalErrorInsufficientFunds;
};
type ProposalResponse = variant { Ok : nat64; Err : ProposalError };
type ProposalType = variant {
  installAppAction;
  treasuryAction;
  deleteAppAction;
};
type ProposalViewResponse = record {
  id : nat64;
  title : text;
  endTime : nat64;
  description : text;
  ended : bool;
  error : opt ProposalError;
  proposalType : ProposalType;
  proposer : Account;
  executed : bool;
  amount : opt nat64;
  receiver : opt Account;
};
type SupportedStandard = record { url : text; name : text };
type Transaction = record {
  fee : nat;
  args : opt TransferArgs;
  from : opt Account;
  kind : TransactionKind;
  timestamp : nat64;
};
type TransactionKind = variant { Burn; Mint; Transfer };
type TransferArgs = record {
  to : Account;
  fee : opt nat;
  memo : opt vec nat8;
  from_subaccount : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
};
type TransferError = variant {
  GenericError : _InlineTransferErrorGenericError;
  TemporarilyUnavailable;
  BadBurn : _InlineTransferErrorBadBurn;
  Duplicate : _InlineTransferErrorDuplicate;
  BadFee : _InlineTransferErrorBadFee;
  CreatedInFuture : _InlineTransferErrorCreatedInFuture;
  TooOld;
  InsufficientFunds : _InlineProposalErrorInsufficientFunds;
};
type TransferResult = variant { Ok : nat; Err : TransferError };
type Value = variant { Int : int; Nat : nat; Blob : vec nat8; Text : text };
type VoteStatus = record {
  myVoteYes : nat64;
  voteNo : nat64;
  voteYes : nat64;
  myVoteNo : nat64;
};
type VoteStatusResponse = variant { Ok : VoteStatus; Err : text };
type _InlineProposalErrorInsufficientFunds = record { balance : nat };
type _InlineTransferErrorBadBurn = record { min_burn_amount : nat };
type _InlineTransferErrorBadFee = record { expected_fee : nat };
type _InlineTransferErrorCreatedInFuture = record { ledger_time : nat64 };
type _InlineTransferErrorDuplicate = record { duplicate_of : nat };
type _InlineTransferErrorGenericError = record {
  message : text;
  error_code : nat;
};
service : () -> {
  activeProposal : () -> (ActiveProposal) query;
  airdrop_claim : () -> (text);
  airdrop_snapshot : () -> (text);
  airdrop_snapshot_holders_length : () -> (float64) query;
  airdrop_snapshot_status : () -> (text) query;
  burnAllXtc : () -> (nat);
  canisters : () -> (vec Canisters) query;
  createDeleteWasmProposal : (Account, text, text, text) -> (ProposalResponse);
  createTreasuryProposal : (Account, text, text, Account, nat64) -> (
      ProposalResponse,
    );
  createWasmProposal : (
      Account,
      text,
      text,
      vec nat8,
      opt vec nat8,
      opt text,
      opt text,
    ) -> (ProposalResponse);
  cycleBalances : () -> (vec record { text; nat64 });
  distributeToken : (nat) -> (text);
  distributionBalance : () -> (nat) query;
  drainCycles : () -> (ManualReply);
  getDrainCanister : () -> (float64) query;
  get_transactions : (opt nat64, opt nat64) -> (vec Transaction) query;
  icrc1_balance_of : (Account) -> (nat) query;
  icrc1_decimals : () -> (nat8) query;
  icrc1_fee : () -> (nat) query;
  icrc1_metadata : () -> (vec record { text; Value }) query;
  icrc1_minting_account : () -> (opt Account) query;
  icrc1_name : () -> (text) query;
  icrc1_supported_standards : () -> (vec SupportedStandard) query;
  icrc1_symbol : () -> (text) query;
  icrc1_total_supply : () -> (nat) query;
  icrc1_transfer : (TransferArgs) -> (TransferResult);
  installDrainCanister : (vec nat8) -> ();
  mint_tokens : () -> (TransferResult);
  pastProposals : () -> (vec ProposalViewResponse) query;
  startTimer : () -> (nat64);
  vote : (Account, nat, nat64, bool) -> (ProposalResponse);
  voteStatus : () -> (VoteStatusResponse) query;
}